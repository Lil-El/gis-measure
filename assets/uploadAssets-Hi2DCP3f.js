import{f1 as m,bv as y,a$ as l,ek as M,b as c,by as x,bx as J,gU as O,gS as k,dL as V,a0 as G,gT as W,hV as K}from"./index-ZXy_8vtR.js";import{m as Q,N as X,g as Y,a as U,i as N}from"./External-BdQiH0Wr.js";const v=1e6,D=20*v,Z=2e9,_=3;async function ee({data:e,name:a,description:t},s,n){let r=null;try{const o=m(s,"uploads"),i=m(o,"info"),{data:u}=await y(i,{query:{f:"json"},responseType:"json"});l(n);const p=M(s),d=u.maxUploadFileSize*v,w=p?Z:d,T=p?Math.min(D,d):D;if(e.size>w)throw new Error("Data too large");const P=m(o,"register"),{data:E}=await y(P,{query:{f:"json",itemName:a,description:t},responseType:"json",method:"post"});if(l(n),!E.success)throw new Error("Registration failed");const{itemID:R}=E.item;r=m(o,R);const C=m(r,"uploadPart"),L=Math.ceil(e.size/T),h=new Array;for(let f=0;f<L;++f)h.push(e.slice(f*T,Math.min((f+1)*T,e.size)));const g=h.slice().reverse(),j=new Array,B=async()=>{for(;g.length!==0;){const f=h.length-g.length,b=g.pop(),$=new FormData;$.append("f","json"),$.append("file",b),$.append("partId",`${f}`);const{data:H}=await y(C,{timeout:0,body:$,responseType:"json",method:"post"});if(l(n),!H.success)throw new Error("Part upload failed")}};for(let f=0;f<_&&g.length!==0;++f)j.push(B());await Promise.all(j);const z=m(r,"commit"),{data:F}=await y(z,{query:{f:"json",parts:h.map((f,b)=>b).join(",")},responseType:"json",method:"post"});if(l(n),!F.success)throw new Error("Commit failed");return F.item}catch(o){if(r!=null){const i=m(r,"delete");await y(i,{query:{f:"json"},responseType:"json",method:"post"})}throw o}}async function Te(e,a,t){return e.length?Promise.all(e.map(s=>te(s,a,t))):[]}async function te(e,{layer:a,ongoingUploads:t},s){const n=t.get(e);if(n)return n;if(!we(a))throw new c(`${a.type}-layer:upload-failure`,"Layer does not support asset uploads.",new Error);if(ae(e,a))return e;const r=se(e,a,s);t.set(e,r);try{await r}finally{t.delete(e)}return e}function ae(e,a){const{parsedUrl:t}=a;return t!=null&&e.metadata.externalSources.some(s=>Q(s,t))}async function se(e,a,t){const{metadata:s}=e,{displaySource:n}=s,r=A(n==null?void 0:n.source,a),o=!!r,i=s.externalSources.length>0,u=o?oe(r,a,t):i?re(e,a,t):ne(e,a,t),p=await u;return l(t),e.addExternalSources([p]),e}async function oe(e,a,t){return{source:await S(e,a,t),original:!0}}async function re(e,a,t){const s=q(a),{externalSources:n}=e.metadata,r=le(n,a);if(!r)throw new c(`${a.type}-layer:upload-failure`,"Could not find an external source that is supported by the service.",new Error);const o=await S(r,a,t);return e.addExternalSources([{source:o,original:!0}]),{source:await ye(o,a,s)}}async function ne(e,a,t){const s=ie(e,a,t);return{source:await I([s],a,t),extent:e.extent.clone(),original:!0}}async function ie(e,a,t){const s=q(a),n=await e.load(t),r=await n.toBinaryGLTF({ignoreLocalTransform:!0});l(t);const o=await r.buffer();return l(t),{blob:new Blob([o.data],{type:o.type}),assetName:`${O()}.glb`,assetType:s}}function le(e,a){for(const t of e){const s=A(t.source,a);if(s)return s}return null}function A(e,a){if(!e)return null;const{infoFor3D:{supportedFormats:t,editFormats:s}}=a,n=X(e),r=new Array;let o=!1;for(let i=0;i<n.length;++i){const u=ue(n[i],t);if(!u)return null;s.includes(u.assetType)&&(o=!0),r.push(u)}return o?r:null}function ue(e,a){const t=Y(e,a);return t?{asset:e,assetType:t}:null}async function S(e,a,t){return I(e.map(s=>ce(s,t)),a,t)}async function I(e,a,t){const s=await Promise.all(e.map(async r=>{const o=pe(await r,a,t);return l(t),o}));l(t);const{uploadResults:n}=await de(s.map(({item:r})=>r),a,t);return l(t),e.map((r,o)=>fe(s[o],n[o],a))}async function ce(e,a){const{asset:t,assetType:s}=e;if(t instanceof File)return{blob:t,assetName:t.name,assetType:s};const n=await t.toBlob(a);return l(a),{blob:n,assetName:t.assetName,assetType:s}}async function pe(e,a,t){const{blob:s,assetType:n,assetName:r}=e;let o=null;try{const i=await ee({data:s,name:r},a.url,t);l(t),o={assetType:n,assetUploadId:i.itemID}}catch(i){V(i),G.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${a.url} does not support the REST Uploads API.`)}if(!o){const i=await W(s);if(l(t),!i.isBase64)throw new c(`${a.type}-layer:uploadAssets-failure`,"Expected gltf data in base64 format after conversion.",new Error);o={assetType:n,assetData:i.data}}if(!o)throw new c(`${a.type}-layer:uploadAssets-failure`,"Unable to prepare uploadAsset request options.",new Error);return{item:o,assetName:r}}async function de(e,a,t){const s=await y(m(a.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if(l(t),s.data.uploadResults.length!==e.length)throw new c(`${a.type}-layer:uploadAssets-failure`,`Bad response. Uploaded ${e.length} items and received ${s.data.uploadResults.length} results.`,new Error);return s.data}function fe(e,a,t){const{success:s}=a;if(!s){const{error:p}=a;throw new c(`${t.type}-layer:upload-failure`,`Failed to upload mesh file ${e.assetName}. Error code: ${p.code}. Error message: ${p.messages}`,new Error)}const{assetHash:n}=a,{assetName:r,item:{assetType:o}}=e,{infoFor3D:{supportedFormats:i}}=t,u=K(o,i);if(!u)throw new c(`${t.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${o}, but it does not list it in its supported formats.`,new Error);return new U(r,u,[new N(`${t.parsedUrl.path}/assets/${n}`,n)])}async function ye(e,a,t){var p;const s=e.map(({assetName:d,parts:w})=>({assetName:d,assetHash:w[0].partHash})),n=(p=a.capabilities)==null?void 0:p.operations.supportsAsyncConvert3D,r={query:{f:"json",assets:JSON.stringify(s),transportType:"esriTransportTypeUrl",targetFormat:t,async:n},responseType:"json",timeout:0},o=m(a.parsedUrl.path,"convert3D"),i=(n?await me(o,r):await y(o,r)).data,{infoFor3D:{supportedFormats:u}}=a;return i.assets.map(d=>{const w=x(d.contentType,u);if(!w)throw new c(`${a.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${w}, but it does not list it in its supported formats.`,new Error);return new U(d.assetName,d.contentType,[new N(d.assetURL,d.assetHash)])})}async function me(e,a){const t=(await y(e,a)).data.statusUrl;for(;;){const s=(await y(t,{query:{f:"json"},responseType:"json"})).data;switch(s.status){case"Completed":return y(s.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new c("async-convert3D-failed","asynchronous convert3D call failed.");case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new c("async-convert3D-failed","asynchronous convert3D call failed (undefined response status)")}await k(he)}}function we(e){return!!e.infoFor3D&&!!e.url}function q(e){const{infoFor3D:a}=e,t=x("model/gltf-binary",a.supportedFormats)??J("glb",a.supportedFormats);if(!t)throw new c(`${e.type}-layer:upload-failure`,"Layer does not support glb.",new Error);return t}const he=1e3;export{Te as uploadAssets};
