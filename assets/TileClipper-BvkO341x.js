var T,c;(function(r){r[r.Unknown=0]="Unknown",r[r.Point=1]="Point",r[r.LineString=2]="LineString",r[r.Polygon=3]="Polygon"})(T||(T={}));class g{constructor(t,s){this.x=t,this.y=s}clone(){return new g(this.x,this.y)}equals(t,s){return t===this.x&&s===this.y}isEqual(t){return t.x===this.x&&t.y===this.y}setCoords(t,s){this.x=t,this.y=s}normalize(){const t=this.x,s=this.y,i=Math.sqrt(t*t+s*s);this.x/=i,this.y/=i}rightPerpendicular(){const t=this.x;this.x=this.y,this.y=-t}move(t,s){this.x+=t,this.y+=s}assign(t){this.x=t.x,this.y=t.y}assignAdd(t,s){this.x=t.x+s.x,this.y=t.y+s.y}assignSub(t,s){this.x=t.x-s.x,this.y=t.y-s.y}rotate(t,s){const i=this.x,h=this.y;this.x=i*t-h*s,this.y=i*s+h*t}scale(t){this.x*=t,this.y*=t}length(){const t=this.x,s=this.y;return Math.sqrt(t*t+s*s)}static distance(t,s){const i=s.x-t.x,h=s.y-t.y;return Math.sqrt(i*i+h*h)}static add(t,s){return new g(t.x+s.x,t.y+s.y)}static sub(t,s){return new g(t.x-s.x,t.y-s.y)}}class R{constructor(t,s,i){this.ratio=t,this.x=s,this.y=i}}class L{constructor(t,s,i,h=8,n=8){this._lines=[],this._starts=[],this.validateTessellation=!0,this._pixelRatio=h,this._pixelMargin=n,this._tileSize=512*h,this._dz=t,this._yPos=s,this._xPos=i}setPixelMargin(t){t!==this._pixelMargin&&(this._pixelMargin=t,this.setExtent(this._extent))}setExtent(t){this._extent=t,this._finalRatio=this._tileSize/t*(1<<this._dz);let s=this._pixelRatio*this._pixelMargin;s/=this._finalRatio;const i=t>>this._dz;s>i&&(s=i),this._margin=s,this._xmin=i*this._xPos-s,this._ymin=i*this._yPos-s,this._xmax=this._xmin+i+2*s,this._ymax=this._ymin+i+2*s}reset(t){this._type=t,this._lines=[],this._starts=[],this._line=null,this._start=0}moveTo(t,s){this._pushLine(),this._prevIsIn=this._isIn(t,s),this._moveTo(t,s,this._prevIsIn),this._prevPt=new g(t,s),this._firstPt=new g(t,s),this._dist=0}lineTo(t,s){const i=this._isIn(t,s),h=new g(t,s),n=g.distance(this._prevPt,h);let e,a,_,y,d,f,o,p;if(i)this._prevIsIn?this._lineTo(t,s,!0):(e=this._prevPt,a=h,_=this._intersect(a,e),this._start=this._dist+n*(1-this._r),this._lineTo(_.x,_.y,!0),this._lineTo(a.x,a.y,!0));else if(this._prevIsIn)a=this._prevPt,e=h,_=this._intersect(a,e),this._lineTo(_.x,_.y,!0),this._lineTo(e.x,e.y,!1);else{const l=this._prevPt,x=h;if(l.x<=this._xmin&&x.x<=this._xmin||l.x>=this._xmax&&x.x>=this._xmax||l.y<=this._ymin&&x.y<=this._ymin||l.y>=this._ymax&&x.y>=this._ymax)this._lineTo(x.x,x.y,!1);else{const m=[];if((l.x<this._xmin&&x.x>this._xmin||l.x>this._xmin&&x.x<this._xmin)&&(y=(this._xmin-l.x)/(x.x-l.x),p=l.y+y*(x.y-l.y),p<=this._ymin?f=!1:p>=this._ymax?f=!0:m.push(new R(y,this._xmin,p))),(l.x<this._xmax&&x.x>this._xmax||l.x>this._xmax&&x.x<this._xmax)&&(y=(this._xmax-l.x)/(x.x-l.x),p=l.y+y*(x.y-l.y),p<=this._ymin?f=!1:p>=this._ymax?f=!0:m.push(new R(y,this._xmax,p))),(l.y<this._ymin&&x.y>this._ymin||l.y>this._ymin&&x.y<this._ymin)&&(y=(this._ymin-l.y)/(x.y-l.y),o=l.x+y*(x.x-l.x),o<=this._xmin?d=!1:o>=this._xmax?d=!0:m.push(new R(y,o,this._ymin))),(l.y<this._ymax&&x.y>this._ymax||l.y>this._ymax&&x.y<this._ymax)&&(y=(this._ymax-l.y)/(x.y-l.y),o=l.x+y*(x.x-l.x),o<=this._xmin?d=!1:o>=this._xmax?d=!0:m.push(new R(y,o,this._ymax))),m.length===0)d?f?this._lineTo(this._xmax,this._ymax,!0):this._lineTo(this._xmax,this._ymin,!0):f?this._lineTo(this._xmin,this._ymax,!0):this._lineTo(this._xmin,this._ymin,!0);else if(m.length>1&&m[0].ratio>m[1].ratio)this._start=this._dist+n*m[1].ratio,this._lineTo(m[1].x,m[1].y,!0),this._lineTo(m[0].x,m[0].y,!0);else{this._start=this._dist+n*m[0].ratio;for(let u=0;u<m.length;u++)this._lineTo(m[u].x,m[u].y,!0)}this._lineTo(x.x,x.y,!1)}}this._dist+=n,this._prevIsIn=i,this._prevPt=h}close(){if(this._line.length>2){const t=this._firstPt,s=this._prevPt;t.x===s.x&&t.y===s.y||this.lineTo(t.x,t.y);const i=this._line;let h=i.length;for(;h>=4&&(i[0].x===i[1].x&&i[0].x===i[h-2].x||i[0].y===i[1].y&&i[0].y===i[h-2].y);)i.pop(),i[0].x=i[h-2].x,i[0].y=i[h-2].y,--h}}result(t=!0){return this._pushLine(),this._lines.length===0?null:(this._type===T.Polygon&&t&&P.simplify(this._tileSize,this._margin*this._finalRatio,this._lines),this._lines)}resultWithStarts(){if(this._type!==T.LineString)throw new Error("Only valid for lines");this._pushLine();const t=this._lines,s=t.length;if(s===0)return null;const i=[];for(let h=0;h<s;h++)i.push({line:t[h],start:this._starts[h]||0});return i}_isIn(t,s){return t>=this._xmin&&t<=this._xmax&&s>=this._ymin&&s<=this._ymax}_intersect(t,s){let i,h,n;if(s.x>=this._xmin&&s.x<=this._xmax)h=s.y<=this._ymin?this._ymin:this._ymax,n=(h-t.y)/(s.y-t.y),i=t.x+n*(s.x-t.x);else if(s.y>=this._ymin&&s.y<=this._ymax)i=s.x<=this._xmin?this._xmin:this._xmax,n=(i-t.x)/(s.x-t.x),h=t.y+n*(s.y-t.y);else{h=s.y<=this._ymin?this._ymin:this._ymax,i=s.x<=this._xmin?this._xmin:this._xmax;const e=(i-t.x)/(s.x-t.x),a=(h-t.y)/(s.y-t.y);e<a?(n=e,h=t.y+e*(s.y-t.y)):(n=a,i=t.x+a*(s.x-t.x))}return this._r=n,new g(i,h)}_pushLine(){this._line&&(this._type===T.Point?this._line.length>0&&(this._lines.push(this._line),this._starts.push(this._start)):this._type===T.LineString?this._line.length>1&&(this._lines.push(this._line),this._starts.push(this._start)):this._type===T.Polygon&&this._line.length>3&&(this._lines.push(this._line),this._starts.push(this._start))),this._line=[],this._start=0}_moveTo(t,s,i){this._type!==T.Polygon?i&&(t=Math.round((t-(this._xmin+this._margin))*this._finalRatio),s=Math.round((s-(this._ymin+this._margin))*this._finalRatio),this._line.push(new g(t,s))):(i||(t<this._xmin&&(t=this._xmin),t>this._xmax&&(t=this._xmax),s<this._ymin&&(s=this._ymin),s>this._ymax&&(s=this._ymax)),t=Math.round((t-(this._xmin+this._margin))*this._finalRatio),s=Math.round((s-(this._ymin+this._margin))*this._finalRatio),this._line.push(new g(t,s)),this._isH=!1,this._isV=!1)}_lineTo(t,s,i){let h,n;if(this._type!==T.Polygon)if(i){if(t=Math.round((t-(this._xmin+this._margin))*this._finalRatio),s=Math.round((s-(this._ymin+this._margin))*this._finalRatio),this._line.length>0&&(h=this._line[this._line.length-1],h.equals(t,s)))return;this._line.push(new g(t,s))}else this._line&&this._line.length>0&&this._pushLine();else if(i||(t<this._xmin&&(t=this._xmin),t>this._xmax&&(t=this._xmax),s<this._ymin&&(s=this._ymin),s>this._ymax&&(s=this._ymax)),t=Math.round((t-(this._xmin+this._margin))*this._finalRatio),s=Math.round((s-(this._ymin+this._margin))*this._finalRatio),this._line&&this._line.length>0){h=this._line[this._line.length-1];const e=h.x===t,a=h.y===s;if(e&&a)return;this._isH&&e||this._isV&&a?(h.x=t,h.y=s,n=this._line[this._line.length-2],n.x===t&&n.y===s?(this._line.pop(),this._line.length<=1?(this._isH=!1,this._isV=!1):(n=this._line[this._line.length-2],this._isH=n.x===t,this._isV=n.y===s)):(this._isH=n.x===t,this._isV=n.y===s)):(this._line.push(new g(t,s)),this._isH=e,this._isV=a)}else this._line.push(new g(t,s))}}class I{setExtent(t){this._ratio=t===4096?1:4096/t}get validateTessellation(){return this._ratio<1}reset(t){this._lines=[],this._line=null}moveTo(t,s){this._line&&this._lines.push(this._line),this._line=[];const i=this._ratio;this._line.push(new g(t*i,s*i))}lineTo(t,s){const i=this._ratio;this._line.push(new g(t*i,s*i))}close(){const t=this._line;t&&!t[0].isEqual(t[t.length-1])&&t.push(t[0])}result(){return this._line&&this._lines.push(this._line),this._lines.length===0?null:this._lines}}(function(r){r[r.sideLeft=0]="sideLeft",r[r.sideRight=1]="sideRight",r[r.sideTop=2]="sideTop",r[r.sideBottom=3]="sideBottom"})(c||(c={}));class P{static simplify(t,s,i){if(!i)return;const h=-s,n=t+s,e=-s,a=t+s,_=[],y=[],d=i.length;for(let o=0;o<d;++o){const p=i[o];if(!p||p.length<2)continue;let l,x=p[0];const m=p.length;for(let u=1;u<m;++u)l=p[u],x.x===l.x&&(x.x<=h&&(x.y>l.y?(_.push(o),_.push(u),_.push(c.sideLeft),_.push(-1)):(y.push(o),y.push(u),y.push(c.sideLeft),y.push(-1))),x.x>=n&&(x.y<l.y?(_.push(o),_.push(u),_.push(c.sideRight),_.push(-1)):(y.push(o),y.push(u),y.push(c.sideRight),y.push(-1)))),x.y===l.y&&(x.y<=e&&(x.x<l.x?(_.push(o),_.push(u),_.push(c.sideTop),_.push(-1)):(y.push(o),y.push(u),y.push(c.sideTop),y.push(-1))),x.y>=a&&(x.x>l.x?(_.push(o),_.push(u),_.push(c.sideBottom),_.push(-1)):(y.push(o),y.push(u),y.push(c.sideBottom),y.push(-1)))),x=l}if(_.length===0||y.length===0)return;P.fillParent(i,y,_),P.fillParent(i,_,y);const f=[];P.calcDeltas(f,y,_),P.calcDeltas(f,_,y),P.addDeltas(f,i)}static fillParent(t,s,i){const h=i.length,n=s.length;for(let e=0;e<n;e+=4){const a=s[e],_=s[e+1],y=s[e+2],d=t[a][_-1],f=t[a][_];let o=8092,p=-1;for(let l=0;l<h;l+=4){if(i[l+2]!==y)continue;const x=i[l],m=i[l+1],u=t[x][m-1],w=t[x][m];switch(y){case c.sideLeft:case c.sideRight:if(M(d.y,u.y,w.y)&&M(f.y,u.y,w.y)){const v=Math.abs(w.y-u.y);v<o&&(o=v,p=l)}break;case c.sideTop:case c.sideBottom:if(M(d.x,u.x,w.x)&&M(f.x,u.x,w.x)){const v=Math.abs(w.x-u.x);v<o&&(o=v,p=l)}}}s[e+3]=p}}static calcDeltas(t,s,i){const h=s.length;for(let n=0;n<h;n+=4){const e=[],a=P.calcDelta(n,s,i,e);t.push(s[n]),t.push(s[n+1]),t.push(s[n+2]),t.push(a)}}static calcDelta(t,s,i,h){const n=s[t+3];if(n===-1)return 0;const e=h.length;return e>1&&h[e-2]===n?0:(h.push(n),P.calcDelta(n,i,s,h)+1)}static addDeltas(t,s){const i=t.length;let h=0;for(let n=0;n<i;n+=4){const e=t[n+3];e>h&&(h=e)}for(let n=0;n<i;n+=4){const e=s[t[n]],a=t[n+1],_=h-t[n+3];switch(t[n+2]){case c.sideLeft:e[a-1].x-=_,e[a].x-=_,a===1&&(e[e.length-1].x-=_),a===e.length-1&&(e[0].x-=_);break;case c.sideRight:e[a-1].x+=_,e[a].x+=_,a===1&&(e[e.length-1].x+=_),a===e.length-1&&(e[0].x+=_);break;case c.sideTop:e[a-1].y-=_,e[a].y-=_,a===1&&(e[e.length-1].y-=_),a===e.length-1&&(e[0].y-=_);break;case c.sideBottom:e[a-1].y+=_,e[a].y+=_,a===1&&(e[e.length-1].y+=_),a===e.length-1&&(e[0].y+=_)}}}}const M=(r,t,s)=>r>=t&&r<=s||r>=s&&r<=t;export{I as _,L as e,g as h,T as t};
