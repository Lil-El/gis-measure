const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/I3STreeDebugger-BiDqGgxD.js","assets/index-Cy4mlNgs.js","assets/index-DnNJAuj7.css","assets/TileTreeDebugger-1S2yXWQY.js"])))=>i.map(i=>d[i]);
import{ib as R,b5 as j,ic as q,l as y,h as N,g as H,_ as Q,fp as C,d as U,gX as z,a8 as T,a0 as w,dD as D,id as k,fQ as B,Q as W,fm as F,ie as Z,$ as K,W as X,ig as Y,ih as J,p as G,gq as ee,ii as te,ij as re,ik as ie,fz as se,aa as A,ae as oe,e as p,y as g,af as ae,q as ne,a as le,I as de}from"./index-Cy4mlNgs.js";import{D as S,e as he}from"./I3SOverrides-CueUAXw2.js";import{n as ue}from"./LayerView3D-B5eS-Fo2.js";import{_ as ce,c as pe}from"./HeatmapDensity.glsl-CqGPXP2E.js";import{p as ge,r as me,l as fe,j as _e,i as ye}from"./SceneLayerView-HsyWdQId.js";import{y as be,g as ve,Z as xe,n as Ee,f as V}from"./I3SUtil-VFUY8ZTQ.js";import{t as Ie}from"./DefinitionExpressionSceneLayerView-Dw5-HihR.js";import{i as we}from"./PopupSceneLayerView-BYpq9-uv.js";import{t as Ne}from"./popupUtils-BWvNn-dk.js";import"./I3SNode-Dnm1YoAi.js";import"./I3SBinaryReader-DT7efj2T.js";import"./meshFeatureSet-B1bbq8zE.js";import"./MeshGeoreferencedRelativeVertexSpace-DziubWgX.js";import"./MeshLocalVertexSpace-C19iCZRo.js";import"./MeshTransform-CmCf0FLI.js";import"./georeference-eLsaPgE5.js";import"./External-DJ-f09Dr.js";import"./FeatureLayerView3D-96m7exON.js";import"./FeatureLayerViewBase3D-C7UgCvIP.js";import"./query-COAEAFBQ.js";import"./normalizeUtils-Dm4feZdB.js";import"./normalizeUtilsCommon-BG6t4mj0.js";import"./pbfQueryUtils-ZYKvC6TE.js";import"./pbf-CDwuJ1NM.js";import"./EventedSet-B6UhN35c.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./LayerView-D3-CfPeq.js";import"./RefreshableLayerView-Bdq8XFIz.js";import"./dehydratedFeatureComparison-CTSwgXxz.js";import"./queryForSymbologySnapping-BeuuBiDn.js";import"./hash-CcEbRgUF.js";import"./Graphics3DObjectStates-AgIQU6bQ.js";import"./optimizedFeatureQueryEngineAdapter-BjvcuCyw.js";import"./centroid-BDoZr6aR.js";import"./PooledRBush-CdXQsE0v.js";import"./quickselect-MNhqgktj.js";import"./QueryEngine-Dlgv0PZK.js";import"./WhereClause-DmiBXdNr.js";import"./executionError-N6aCOFps.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-Dk3NJwmm.js";import"./utils-DOKTL2iJ.js";import"./generateRendererUtils-CvLWrpaP.js";import"./FeatureStore-plfJxTa2.js";import"./BoundsStore-AkTg_LDK.js";import"./projectExtentUtils-B3pnsTKf.js";class M extends R{constructor(t){super("SceneLayerWorker","dracoDecompressPointCloudData",{dracoDecompressPointCloudData:i=>[i.geometryBuffer]},t,{hasInitialize:!0})}}class Ce extends j{constructor(t,i){super(),this._updateAndCompare=t,this._notifyUpdated=i,this._nodes=new Map,this._graphics=new Map,this._duplicates=new Map}clear(){if(this._graphics.size>0){const t=this.toArray();this._graphics.clear(),this.emit("change",{added:[],removed:t})}this._nodes.clear()}get length(){return this._graphics.size}get(t){return this._graphics.get(t)}getNode(t){return this._nodes.get(t)}hasNode(t){return this._nodes.has(t)}nodes(){return this._nodes.values()}addNode(t,i){this._nodes.set(t,i);const r=i.graphics;if(r.length===0)return;const s=new Set;for(let a=0;a<r.length;a++){const n=r[a],l=n.objectId,h=this._graphics.get(l);if(h){s.add(l),n!==h&&(r[a]=h);const u=this._duplicates.get(l);u?u.push(t):this._duplicates.set(l,[h.nodeIndex,t])}else n.nodeIndex=t,this._graphics.set(l,n)}s.size&&this._updateForeignGraphics(i);const o=s.size>0?r.filter(a=>!s.has(a.objectId)):r;o.length>0&&this.emit("change",{added:o,removed:[]})}removeNode(t){const i=this._nodes.get(t);if(!i)return void console.error("Removing unknown node");this._nodes.delete(t);const r=new Set,s=[];for(const o of i.graphics){const a=o.objectId,n=this._graphics.get(a);if(!n)continue;const l=this._duplicates.get(a);if(l){const h=l.indexOf(t);if(h===-1){console.error("error: removing graphic from node that should not reference it.");continue}if(l.splice(h,1),n.nodeIndex===t){let u=this.getNode(l[0]);for(let d=1;d<l.length;d++){const m=this.getNode(l[d]);(u==null||m!=null&&m.node.level>u.node.level)&&(u=m)}u!=null&&r.add(u)}l.length===1&&this._duplicates.delete(a)}else this._graphics.delete(a),s.push(o)}s.length>0&&this.emit("change",{added:[],removed:s}),r.forEach(o=>this._updateForeignGraphics(o))}_updateForeignGraphics(t){const i=[],r=t.node.index,s=t.node.level;let o=0;for(;o<t.graphics.length;){const a=t.graphics[o].nodeIndex;if(a===r){o++;continue}let n=1;for(;o+n<t.graphics.length&&t.graphics[o+n].nodeIndex===a;)n++;const l=this.getNode(a);if(l!=null&&l.node.level>s)o+=n;else{for(let h=o;h<o+n;h++){const u=t.graphics[h];u.nodeIndex=r,this._updateAndCompare(u,t,h)&&i.push(u)}o+=n}}this._notifyUpdated(i)}toArray(){return Array.from(this._graphics.values())}find(t){let i;return q(this._graphics,r=>!!t(r)&&(i=r,!0)),i}forEach(t){this._graphics.forEach(i=>t(i))}forEachNode(t){this._nodes.forEach((i,r)=>t(i,r))}get nodeCount(){return this._nodes.size}_checkInvariants(){const t=new Map;this._nodes.forEach((r,s)=>{s!==r.node.index&&console.error("Mismatched node index"),r.graphics.forEach(o=>{t.set(o.objectId,1+(t.get(o.objectId)??0));const a=this._duplicates.get(o.objectId);a&&!a.includes(s)&&console.error("Node not listed in duplicate list"),a||o.nodeIndex===s||console.error("Unique graphic does not reference owning node index")})}),this._graphics.size!==t.size&&console.error("Mismatch between actual and expected number of graphics");let i=0;t.forEach((r,s)=>{i+=r>1?1:0;const o=this._graphics.get(s);if(!o)return void console.error("Missing graphic entry");const a=this._nodes.get(o.nodeIndex);if(!a)return void console.error("Graphic references unkown node");const n=this._duplicates.get(s);n?(n.length!==r&&console.error("Wrong number of entries in duplicate list"),n.forEach(l=>{const h=this._nodes.get(l);h?h.node.level>a.node.level&&console.error("Duplicated graphic does not reference highest level node"):console.error("Unknown node in duplicate list")})):r>1&&console.error("Missing duplicates entry")}),this._duplicates.size!==i&&console.error("Mismatch between expected and actual number of duplicate entries")}}const P=ye();class Oe{constructor(t,i,r,s){this.graphics=t,this.featureIds=i,this.attributeInfo=r,this.node=s}}let c=class extends Ie(we(ue(_e))){constructor(){super(...arguments),this.type="scene-layer-graphics-3d",this._queryEngine=null,this._memCache=null,this._interactiveEditingSessions=new Map,this.loadedGraphics=new Ce((e,t,i)=>Fe(e,t,i),e=>this.processor.graphicsCore.recreateGraphics(e)),this.holeFilling="always",this.progressiveLoadFactor=1,this.supportsHeightUnitConversion=!0,this._coordinatesOutsideExtentErrors=0,this._maxCoordinatesOutsideExtentErrors=20}tryRecycleWith(e,t){return e.url===this.layer.url&&this._i3sOverrides.isEmpty?e.load(t).then(()=>{var r;be(this.layer,e,this._i3sOverrides),this.layer=e,this._i3sOverrides.destroy();const i=(r=this.view.resourceController)==null?void 0:r.memoryController;this._i3sOverrides=new S({view:this.view,layer:e,memoryController:i}),y(this._queryEngine),this._setupQueryEngine(),this.processor.resetObjectStates()}):null}initialize(){var t,i;this.addResolvingPromise(this.layer.indexInfo);const e=(t=this.view.resourceController)==null?void 0:t.memoryController;this._i3sOverrides=new S({view:this.view,layer:this.layer,memoryController:e}),ve(this.layer,this.view.spatialReference,this.view.viewingMode),this._fieldsHelper=new ge({layerView:this}),this.updatingHandles.add(()=>this.layer.rangeInfos,r=>this._rangeInfosChanged(r),N),this.updatingHandles.add(()=>this.layer.renderer,(r,s)=>this._rendererChange(r,s)),this.updatingHandles.add(()=>[this.parsedDefinitionExpression,this._excludeObjectIdsSorted],()=>this._filterChange()),this.handles.add(H(()=>C.I3S_TREE_SHOW_TILES,r=>{if(r&&!this._treeDebugger){const s=this._controller.crsIndex;Q(()=>import("./I3STreeDebugger-BiDqGgxD.js"),__vite__mapDeps([0,1,2,3])).then(({I3STreeDebugger:o})=>{!this._treeDebugger&&C.I3S_TREE_SHOW_TILES&&(this._treeDebugger=new o({lv:this,view:this.view,nodeSR:s}))})}else r||!this._treeDebugger||C.I3S_TREE_SHOW_TILES||(this._treeDebugger.destroy(),this._treeDebugger=null)},N)),this._set("processor",new ce({owner:this,preferredUpdatePolicy:U.ASYNC,scaleVisibilityEnabled:!0,filterVisibilityEnabled:!0,timeExtentEnabled:!1,frustumVisibilityEnabled:!1,elevationAlignmentEnabled:!0,elevationFeatureExpressionEnabled:!1,setUidToIdOnAdd:!1,dataExtent:this.layer.fullExtent,updateClippingExtent:r=>this._updateClippingExtent(r)})),(i=this.processor.elevationAlignment)==null||i.events.on("invalidate-elevation",r=>this._controller.updateElevationChanged(r.extent,r.spatialReference)),this.supportsHeightUnitConversion&&(this._verticalScale=z("point",this.layer.spatialReference,this.view.spatialReference)),this.addResolvingPromise(this.processor.initializePromise),this._memCache=this.view.resourceController.memoryController.newCache(`psl-${this.uid}`),this._controller=new he({layerView:this,scaleVisibilityEnabled:!1}),xe(this.layer.geometryDefinitions)&&(this._worker=new M(r=>this.view.resourceController.immediate.schedule(r))),this.handles.add(this.layer.on("apply-edits",r=>this.updatingHandles.addPromise(r.result))),this.handles.add(this.layer.on("edits",r=>this._handleEdits(r))),this.when(()=>{this._setupQueryEngine(),this.updatingHandles.add(()=>this.maximumNumberOfFeatures,r=>this._controller.featureTarget=r,N),this.updatingHandles.add(()=>this.suspended,r=>{r&&this._removeAllNodeData()})})}destroy(){this._treeDebugger=y(this._treeDebugger),this._i3sOverrides=y(this._i3sOverrides),this._set("processor",y(this.processor)),this._controller=y(this._controller),this._queryEngine=y(this._queryEngine),this._worker=y(this._worker),this._memCache=y(this._memCache),this.loadedGraphics.clear(),this._fieldsHelper=y(this._fieldsHelper)}get i3slayer(){return this.layer}get updatingProgressValue(){var e;return((e=this._controller)==null?void 0:e.updatingProgress)??1}get requiredFields(){var e;return((e=this._fieldsHelper)==null?void 0:e.requiredFields)??[]}get maximumNumberOfFeatures(){var t,i;const e=(i=(t=this.processor)==null?void 0:t.graphicsCore)==null?void 0:i.displayFeatureLimit;return(e==null?void 0:e.maximumNumberOfFeatures)??0}set maximumNumberOfFeatures(e){e!=null?(this._override("maximumNumberOfFeatures",e),this._controller.fixedFeatureTarget=!0):(this._clearOverride("maximumNumberOfFeatures"),this._controller.fixedFeatureTarget=!1)}get maximumNumberOfFeaturesExceeded(){var e;return!this.suspended&&!!((e=this._controller)!=null&&e.useMaximumNumberOfFeatures)&&!this._controller.leavesReached}get _excludeObjectIdsSorted(){const e=this.layer.excludeObjectIds;return e.length?e.toArray().sort((t,i)=>t-i):null}get lodFactor(){return this.layer.semantic==="Labels"?1:this.view.qualitySettings.sceneService.point.lodFactor}get hasM(){return!1}get hasZ(){return!0}get contentVisible(){var e;return!this.suspended&&!!((e=this._controller)!=null&&e.rootNodeVisible)}get legendEnabled(){var e;return this.contentVisible&&((e=this.i3slayer)==null?void 0:e.legendEnabled)===!0}async whenGraphicAttributes(e,t){return Ee(this.layer,e,this._getObjectIdField(),t,()=>[...this.loadedGraphics.nodes()])}getHit(e){if(!this.loadedGraphics)return null;const t=T(this.loadedGraphics.find(r=>r.uid===e),this.layer),i=this._getObjectIdField();return t&&t.attributes&&t.attributes[i]?(t.layer=this.layer,t.sourceLayer=this.layer,{type:"graphic",graphic:t,layer:t.layer}):null}whenGraphicBounds(e,t){return this.processor.whenGraphicBounds(e,t)}computeAttachmentOrigin(e,t){return this.processor.computeAttachmentOrigin(e,t)}isUpdating(){var e,t,i;return!!((e=this._controller)!=null&&e.updating||(t=this.processor)!=null&&t.updating||(i=this._fieldsHelper)!=null&&i.updating||this.layerFilterUpdating)}highlight(e){return this.processor.highlight(e,this.layer.objectIdField)}get updatePolicy(){return this.processor.graphicsCore.effectiveUpdatePolicy}createInteractiveEditSession(e){return me(this._attributeEditingContext,e)}async _decompressBinaryPointData(e,t){const i={geometryBuffer:e.geometryBuffer};this._worker==null&&(this._worker=new M(s=>this.view.resourceController.immediate.schedule(s)));const r=await this._worker.invoke(i,t);if(r==null)throw new Error("Failed to decompress Draco point data");return{positionData:r.positions,featureIds:r.featureIds}}async addNode(e,t,i){var _;if(!O(t)&&!De(t))throw new Error;if(this.loadedGraphics.hasNode(e.index))return void w.getLogger(this).error("I3S node "+e.id+" already added");const r=this.layer.fullExtent!=null?Ge(this.layer.fullExtent.clone(),.5):null,s=[],{featureIds:o,pointPositions:a}=O(t)?await this._extractBinaryPointPositions(e,t,i):this._extractLegacyPointPositions(t);this._validatePositions(e,o,a,r,s);const n=this._controller.crsVertex,l=this.view.spatialReference;D(a,n,0,a,l,0,o.length);const h=O(t)?e.level:0,u=this._createGraphics(o,a,e.index,h),d=new Oe(u,o,t.attributeDataInfo,e);if(await this._i3sOverrides.applyAttributeOverrides(d.featureIds,t.attributeDataInfo,i),e.numFeatures=d.graphics.length,this._updateNodeMemory(e),L(d),s.length>0&&(this._computeObb(e,s,n),this._controller.updateVisibility(e.index)),!this._controller.isGeometryVisible(e))return void this._cacheNodeData(d);if(this._verticalScale!=null)for(const b of d.graphics)this._verticalScale(b.geometry);const m=this.view._stage.renderView.objectAndLayerIdRenderHelper;if(m!=null){const b=k(this.view.map,this.layer.uid);for(let x=0;x<d.featureIds.length;x++){const I=d.featureIds[x];m.setUidToObjectAndLayerId(I,d.graphics[x].uid,this.layer.id,this.layer.uid,this.layer.popupEnabled&&!b&&Ne(this.layer,(_=this.view.popup)==null?void 0:_.defaultPopupTemplateEnabled),d.node.resources.attributes,x)}}this.loadedGraphics.addNode(e.index,d),this._controller.updateLoadStatus(e.index,!0),this._filterNode(d),this._treeDebugger&&this._treeDebugger.update()}_computeObb(e,t,i){const r=this._controller.crsIndex,s=r.isGeographic?this.view.renderSpatialReference:r;D(t,i,0,t,s,0,t.length/3),e.serviceObb=B(new de(t,3)),r.isGeographic&&W(e.serviceObb.center,s,e.serviceObb.center,r)}isNodeLoaded(e){return this.loadedGraphics.hasNode(e)}isNodeReloading(){return!1}updateNodeState(){}async _extractBinaryPointPositions(e,t,i){const r=await this._decompressBinaryPointData(t,i),s=r.positionData,o=3,a=s.length/o,n=F(3*a),l=e.serviceObb!=null?e.serviceObb.center:[0,0,0],h=Math.abs(l[2])*2**-20;for(let u=0;u<a;u++){const d=u*o;n[d]=s[d]+l[0],n[d+1]=s[d+1]+l[1],n[d+2]=s[d+2]+l[2],Math.abs(n[d+2])<h&&(n[d+2]=0)}return{featureIds:r.featureIds?Z(r.featureIds):[],pointPositions:n}}_extractLegacyPointPositions(e){var s,o;const t=e.pointData.length,i=F(3*t),r=new Array;for(let a=0;a<t;a++){const n=e.pointData[a],l=n.featureDataPosition,h=l.length,u=((s=n.geometries)==null?void 0:s[0])??Ae[h],d=n.featureIds[0];if(u.type!=="Embedded"||u.params.type!=="points"||h<2||h>3)continue;const m=((o=u.params.vertexAttributes)==null?void 0:o.position)??[0,0,0],_=3*r.length;i[_]=l[0]+m[0],i[_+1]=l[1]+m[1],i[_+2]=h===3?l[2]+m[2]:NaN,r.push(d)}return{featureIds:r,pointPositions:i}}_validatePositions(e,t,i,r,s){if(r==null&&e.serviceObb)return;const o=t.length,a=3;for(let n=0;n<o;n++){const l=n*a;K(E,i[l],i[l+1],i[l+2]);const h=!Number.isNaN(i[2]);r==null||(h?Y(r,E):J(r,E))||(this._coordinatesOutsideExtentErrors<this._maxCoordinatesOutsideExtentErrors&&w.getLogger(this).error("Service Error: Coordinates outside of layer extent"),this._coordinatesOutsideExtentErrors+1===this._maxCoordinatesOutsideExtentErrors&&w.getLogger(this).error("Maximum number of errors reached. Further errors are ignored."),this._coordinatesOutsideExtentErrors++),e.serviceObb||s.push(E[0],E[1],E[2])}}_createGraphics(e,t,i,r){const s=e.length,o=3,a=this._getObjectIdField(),n=this.processor.graphicsCore,l=new Array,h=this.view.spatialReference;for(let u=0;u<s;u++){const d=e[u],m={};d!=null&&(m[a]=d);const _=d??G.generateUID(),b=u*o,x=isNaN(t[b+2])?void 0:t[b+2],I=ee(t[b],t[b+1],x,h),v=this.loadedGraphics.get(_);if(v!=null)(v.level==null||v.level<r)&&(f.property="geometry",f.graphic=v,f.oldValue=v.geometry,f.newValue=I,v.geometry=I,v.level=r,n.graphicUpdateHandler(f)),l.push(v);else{const $=G.generateUID();l.push({objectId:_,uid:$,geometry:I,attributes:m,visible:!0,nodeIndex:i,level:r})}}return l}_updateNodeMemory(e){e.memory=4096+(e.numFeatures!=null?e.numFeatures*this.processor.graphicsCore.usedMemoryPerGraphic:0)}_cacheNodeData(e){const t=e.graphics.reduce((i,r)=>te(r)+i,re(e.featureIds)+1024);this._memCache.put(this._getMemCacheKey(e.node),e,t)}_getMemCacheKey(e){return`${e.index}`}_removeAllNodeData(){this.loadedGraphics.forEachNode((e,t)=>{if(e){const i=e.node;this._updateNodeMemory(i),this._cacheNodeData(e)}this._controller.updateLoadStatus(t,!1)}),this._treeDebugger&&this._treeDebugger.update(),this.loadedGraphics.clear()}removeNode(e){const t=this._removeNodeStageData(e);t&&(this._updateNodeMemory(t.node),this._cacheNodeData(t))}_removeNodeStageData(e){const t=this.loadedGraphics.getNode(e);return t==null?null:(this._controller.updateLoadStatus(e,!1),this.loadedGraphics.removeNode(e),this._treeDebugger&&this._treeDebugger.update(),t)}async loadCachedNodeData(e){var t;return(t=this._memCache)==null?void 0:t.pop(this._getMemCacheKey(e))}async addCachedNodeData(e,t,i,r){this.loadedGraphics.hasNode(e.index)?w.getLogger(this).error("I3S node "+e.id+" already added"):(await this._i3sOverrides.applyAttributeOverrides(t.featureIds,i,r),this.loadedGraphics.addNode(e.index,t),this._controller.updateLoadStatus(e.index,!0),this._updateNodeMemory(e),t.attributeInfo=i,this._attributeValuesChanged(t),this._filterNode(t),this._treeDebugger&&this._treeDebugger.update())}getLoadedNodeIds(){const e=[];return this.loadedGraphics.forEachNode(t=>e.push(t.node.id)),e.sort()}getVisibleNodes(){const e=new Array;return this.loadedGraphics.forEachNode(t=>e.push(t.node)),e}getLoadedNodeIndices(e){this.loadedGraphics.forEachNode((t,i)=>e.push(i))}getLoadedAttributes(e){const t=this.loadedGraphics.getNode(e);if(t!=null&&t.attributeInfo!=null)return t.attributeInfo.loadedAttributes}getAttributeData(e){const t=this.loadedGraphics.getNode(e);if(t!=null&&t.attributeInfo!=null)return t.attributeInfo.attributeData}_setAttributeData(e,t){const i=this.loadedGraphics.getNode(e);i!=null&&i.attributeInfo!=null&&(i.attributeInfo.attributeData=t,this._attributeValuesChanged(i))}async updateAttributes(e,t,i){const r=this.loadedGraphics.getNode(e);r!=null&&(await this._i3sOverrides.applyAttributeOverrides(r.featureIds,t,i),r.attributeInfo=t,this._attributeValuesChanged(r))}_attributeValuesChanged(e){if(L(e),this._filterNode(e),this.processor.graphicsCore.labelsEnabled){const t=e.graphics.map(i=>i.uid);this.processor.graphicsCore.updateLabelingInfo(t)}}_updateClippingExtent(e){return this._controller&&this._controller.updateClippingArea(e),!1}_getObjectIdField(){return this.layer.objectIdField||ie}_getGlobalIdField(){var e;return(e=this.layer.associatedLayer)==null?void 0:e.globalIdField}async _rendererChange(e,t){const{layer:{fieldsIndex:i}}=this,r=new Set;let s,o;e?(await e.collectRequiredFields(r,i),s=Array.from(r).sort()):s=[],r.clear(),t?(await t.collectRequiredFields(r,i),o=Array.from(r).sort()):o=[],s.length===o.length&&s.every((a,n)=>s[n]===o[n])||this._reloadAllNodes()}_rangeInfosChanged(e){e!=null&&e.length>0&&w.getLogger(this).warn("Unsupported property: rangeInfos are currently only serialized to and from web scenes but do not affect rendering.")}_filterChange(){this.loadedGraphics.forEachNode(e=>this._filterNode(e))}_reloadAllNodes(){this._removeAllNodeData(),this._controller&&this._controller.restartNodeLoading()}_filterNode(e){const t=this.parsedDefinitionExpression,i=this._excludeObjectIdsSorted,r=this._getObjectIdField();for(const s of e.graphics){const o=s.visible,a=!t||this._evaluateClause(t,s),n=i==null||se(i,s.attributes[r])<0;s.visible=a&&n,o!==s.visible&&(f.graphic=s,f.property="visible",f.oldValue=o,f.newValue=s.visible,this.processor.graphicsCore.graphicUpdateHandler(f))}}createQuery(){const e={outFields:["*"],returnGeometry:!0,outSpatialReference:this.view.spatialReference};return this.filter!=null?this.filter.createQuery(e):new A(e)}queryFeatures(e,t){return this._queryEngine.executeQuery(this._ensureQuery(e),t==null?void 0:t.signal)}queryObjectIds(e,t){return this._queryEngine.executeQueryForIds(this._ensureQuery(e),t==null?void 0:t.signal)}queryFeatureCount(e,t){return this._queryEngine.executeQueryForCount(this._ensureQuery(e),t==null?void 0:t.signal)}queryExtent(e,t){return this._queryEngine.executeQueryForExtent(this._ensureQuery(e),t==null?void 0:t.signal)}_ensureQuery(e){return this._addDefinitionExpressionToQuery(e==null?this.createQuery():A.from(e))}_setupQueryEngine(){const e=()=>this.processor.featureStore;this._queryEngine=new pe({context:{spatialReference:this.view.spatialReference,layer:this.layer,scheduler:this.view.resourceController.scheduler,get featureStore(){return e()},hasZ:this.hasZ,hasM:this.hasM},priority:oe.FEATURE_QUERY_ENGINE})}get usedMemory(){var e,t;return((t=(e=this.processor)==null?void 0:e.graphicsCore)==null?void 0:t.usedMemory)??0}get unloadedMemory(){var e,t,i;return .8*((((e=this._controller)==null?void 0:e.unloadedMemoryEstimate)??0)+(((i=(t=this.processor)==null?void 0:t.graphicsCore)==null?void 0:i.unprocessedMemoryEstimate)??0))}get ignoresMemoryFactor(){return this._controller&&this._controller.fixedFeatureTarget}_handleEdits(e){fe(this._attributeEditingContext,e)}get _attributeEditingContext(){const e=this._getObjectIdField(),t=this._getGlobalIdField();return{sessions:this._interactiveEditingSessions,fieldsIndex:this.layer.fieldsIndex,objectIdField:e,globalIdField:t,forEachNode:i=>this.loadedGraphics.forEachNode(r=>i(r.node,r.featureIds)),attributeStorageInfo:this.i3slayer.attributeStorageInfo??[],i3sOverrides:this._i3sOverrides,getAttributeData:i=>this.getAttributeData(i),setAttributeData:(i,r,s)=>{this._setAttributeData(i,r);const o=this.loadedGraphics.getNode(i);if(s!=null){const a=this.loadedGraphics.get(s.attributes[e]);a!=null&&this.processor.graphicsCore.recreateGraphics([a])}else o!=null&&this.processor.graphicsCore.recreateGraphics(o.graphics)},clearMemCache:()=>{}}}get performanceInfo(){const e={displayedNumberOfFeatures:this.loadedGraphics.length,maximumNumberOfFeatures:this.maximumNumberOfFeatures,totalNumberOfFeatures:-1,nodes:this.loadedGraphics.nodeCount,core:this.processor.graphicsCore.performanceInfo};return this._controller&&this._controller.updateStats(e),e}get test(){return{controller:this._controller,numNodes:this.loadedGraphics.nodeCount,loadedGraphics:this.loadedGraphics}}};p([g()],c.prototype,"processor",void 0),p([g({type:ae})],c.prototype,"filter",void 0),p([g()],c.prototype,"loadedGraphics",void 0),p([g()],c.prototype,"i3slayer",null),p([g()],c.prototype,"_controller",void 0),p([g()],c.prototype,"updating",void 0),p([g()],c.prototype,"suspended",void 0),p([g()],c.prototype,"holeFilling",void 0),p([g(ne)],c.prototype,"updatingProgress",void 0),p([g()],c.prototype,"updatingProgressValue",null),p([g(P.requiredFields)],c.prototype,"requiredFields",null),p([g(P.availableFields)],c.prototype,"availableFields",void 0),p([g()],c.prototype,"_fieldsHelper",void 0),p([g({type:Number})],c.prototype,"maximumNumberOfFeatures",null),p([g({readOnly:!0})],c.prototype,"maximumNumberOfFeaturesExceeded",null),p([g()],c.prototype,"_excludeObjectIdsSorted",null),p([g({readOnly:!0})],c.prototype,"lodFactor",null),p([g({readOnly:!0})],c.prototype,"hasM",null),p([g({readOnly:!0})],c.prototype,"hasZ",null),p([g()],c.prototype,"contentVisible",null),p([g({readOnly:!0})],c.prototype,"legendEnabled",null),c=p([le("esri.views.3d.layers.SceneLayerGraphicsView3D")],c);const wt=c;function De(e){return"pointData"in e}function O(e){return"geometryBuffer"in e&&e.geometryBuffer!==null}function Fe(e,t,i){const r=t.attributeInfo;if(r==null||r.loadedAttributes==null||r.attributeData==null)return!1;let s=!1;for(const{name:o}of r.loadedAttributes)if(r.attributeData[o]){const a=V(r.attributeData[o],i);a!==e.attributes[o]&&(e.attributes[o]=a,s=!0)}return s}function L(e){const t=e.attributeInfo,i=e.node.index;if(t!=null&&t.loadedAttributes!=null&&t.attributeData!=null)for(let r=0;r<e.graphics.length;r++){const s=e.graphics[r];if(s.nodeIndex===i){s.attributes||(s.attributes={});for(const{name:o}of t.loadedAttributes)t.attributeData[o]&&(s.attributes[o]=V(t.attributeData[o],r))}}}function Ge(e,t){return e.xmin-=t,e.ymin-=t,e.xmax+=t,e.ymax+=t,e.zmin!=null&&e.zmax!=null&&(e.zmin-=t,e.zmax+=t),e.mmin!=null&&e.mmax!=null&&(e.mmin-=t,e.mmax+=t),e}const Ae={2:{type:"Embedded",params:{type:"points",vertexAttributes:{position:[0,0]}}},3:{type:"Embedded",params:{type:"points",vertexAttributes:{position:[0,0,0]}}}},E=X(),f={graphic:null,property:null,oldValue:null,newValue:null};export{wt as default};
