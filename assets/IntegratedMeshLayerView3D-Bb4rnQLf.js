import{k as n,h as p,p as m,e as i,y as e,q as l,a as d}from"./index-BZRBOKU4.js";import{x as h}from"./I3SMeshView3D-FnUjNT7h.js";import{n as u}from"./LayerView3D-CYbFjfBV.js";import{d as c}from"./LayerView-CLsBRacj.js";import"./I3SOverrides-DpT0zmHf.js";import"./I3SNode-dzd5I4tQ.js";import"./I3SUtil-I7UsNkEQ.js";import"./I3SBinaryReader-DsqQNzLk.js";import"./meshFeatureSet-CuAAyNoU.js";import"./MeshGeoreferencedRelativeVertexSpace-C_5MqZlG.js";import"./MeshLocalVertexSpace-BznxjFta.js";import"./MeshTransform-Danlj2Gi.js";import"./georeference-CB9jrWXH.js";import"./External-D_vV-ey-.js";import"./FeatureLayerView3D-0LGCSYl9.js";import"./FeatureLayerViewBase3D-CiE-m6Ql.js";import"./HeatmapDensity.glsl-D-7A9CMK.js";import"./dehydratedFeatureComparison-BdjGKwew.js";import"./queryForSymbologySnapping-DhEKJ6ZG.js";import"./hash-CcEbRgUF.js";import"./Graphics3DObjectStates-Cb1Natw1.js";import"./optimizedFeatureQueryEngineAdapter-BG62CQbT.js";import"./centroid-BDoZr6aR.js";import"./PooledRBush-cAW6cR4Y.js";import"./quickselect-DNCrFmAi.js";import"./popupUtils-BWa1xVfX.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./QueryEngine-1u2o3kYq.js";import"./normalizeUtils-R34S0c9T.js";import"./normalizeUtilsCommon-fmL4nco6.js";import"./WhereClause-BrQAyCIn.js";import"./executionError-N6aCOFps.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-Dk3NJwmm.js";import"./utils-BCy4wUgL.js";import"./generateRendererUtils-DsuVLOvt.js";import"./FeatureStore-LnViJbXV.js";import"./BoundsStore-PImMzyrA.js";import"./projectExtentUtils-CkRw41aD.js";import"./query-Drl9KHqJ.js";import"./pbfQueryUtils-DRXG5FFo.js";import"./pbf-CwGzIPR0.js";import"./EventedSet-DQt1rgAy.js";import"./RefreshableLayerView-vRQB2L_9.js";import"./SceneLayerWorker-B5mjGjqR.js";const g=.2;let r=class extends h(u(c)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,o,a,s;return((s=(a=(o=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this.updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.handles.remove("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.handles.add(this.updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([e()],r.prototype,"layer",void 0),i([e()],r.prototype,"i3slayer",null),i([e(l)],r.prototype,"updatingProgress",void 0),i([e()],r.prototype,"updatingProgressValue",null),i([e()],r.prototype,"lodFactor",null),i([e({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const pt=r;export{pt as default};
