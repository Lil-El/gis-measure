import{aU as D,dn as X,bv as k,f6 as F,ar as K,il as W,im as _,dU as B,bK as E,aX as P,io as O,a0 as G,j as U,ip as H,b as Q}from"./index-ZXy_8vtR.js";import{r as A,i as R,o as I,s as C}from"./normalizeUtilsCommon-BcPwwkhu.js";async function V(t,s,f,n){const e=D(t),a=s[0].spatialReference,c={...n,query:{...e.query,f:"json",sr:JSON.stringify(a),target:JSON.stringify({geometryType:X(s[0]),geometries:s}),cutter:JSON.stringify(f)}},o=await k(e.path+"/cut",c),{cutIndexes:u,geometries:y=[]}=o.data;return{cutIndexes:u,geometries:y.map(h=>{const x=F(h);return x.spatialReference=a,x})}}async function Y(t,s,f){const n=typeof t=="string"?K(t):t,e=s[0].spatialReference,a=X(s[0]),c={...f,query:{...n.query,f:"json",sr:e.wkid??JSON.stringify(e),geometries:JSON.stringify(W(s))}},{data:o}=await k(n.path+"/simplify",c);return _(o.geometries,a,e)}const T=G.getLogger("esri.geometry.support.normalizeUtils");function Z(t){return t.type==="polygon"}function tt(t){return t[0].type==="polygon"}function et(t){return t[0].type==="polyline"}function st(t,s){if(!(t instanceof P||t instanceof U)){const e="straightLineDensify: the input geometry is neither polyline nor polygon";throw T.error(e),new Q(e)}const f=I(t),n=[];for(const e of f){const a=[];n.push(a),a.push([e[0][0],e[0][1]]);for(let c=0;c<e.length-1;c++){const o=e[c][0],u=e[c][1],y=e[c+1][0],h=e[c+1][1],x=Math.sqrt((y-o)*(y-o)+(h-u)*(h-u)),l=(h-u)/x,m=(y-o)/x,p=x/s;if(p>1){for(let b=1;b<=p-1;b++){const j=b*s,r=m*j+o,i=l*j+u;a.push([r,i])}const w=(x+Math.floor(p-1)*s)/2,S=m*w+o,J=l*w+u;a.push([S,J])}a.push([y,h])}}return Z(t)?new U({rings:n,spatialReference:t.spatialReference}):new P({paths:n,spatialReference:t.spatialReference})}function v(t,s,f){if(s){const n=st(t,1e6);t=H(n,!0)}return f&&(t=C(t,f)),t}function z(t,s,f){if(Array.isArray(t)){const n=t[0];if(n>s){const e=R(n,s);t[0]=n+e*(-2*s)}else if(n<f){const e=R(n,f);t[0]=n+e*(-2*f)}}else{const n=t.x;if(n>s){const e=R(n,s);t=t.clone().offset(e*(-2*s),0)}else if(n<f){const e=R(n,f);t=t.clone().offset(e*(-2*f),0)}}return t}function nt(t,s){let f=-1;for(let n=0;n<s.cutIndexes.length;n++){const e=s.cutIndexes[n],a=s.geometries[n],c=I(a);for(let o=0;o<c.length;o++){const u=c[o];u.some(y=>{if(y[0]<180)return!0;{let h=0;for(let l=0;l<u.length;l++){const m=u[l][0];h=m>h?m:h}h=Number(h.toFixed(9));const x=-360*R(h,180);for(let l=0;l<u.length;l++){const m=a.getPoint(o,l);a.setPoint(o,l,m.clone().offset(x,0))}return!0}})}if(e===f){if(tt(t))for(const o of I(a))t[e]=t[e].addRing(o);else if(et(t))for(const o of I(a))t[e]=t[e].addPath(o)}else f=e,t[e]=a}return t}async function ot(t,s,f){if(!Array.isArray(t))return ot([t],s);s&&typeof s!="string"&&T.warn("normalizeCentralMeridian()","The url object is deprecated, use the url string instead");const n=typeof s=="string"?s:(s==null?void 0:s.url)??B.geometryServiceUrl;let e,a,c,o,u,y,h,x,l=0;const m=[],p=[];for(const r of t)if(r!=null)if(e||(e=r.spatialReference,a=E(e),c=e.isWebMercator,y=c?102100:4326,o=A[y].maxX,u=A[y].minX,h=A[y].plus180Line,x=A[y].minus180Line),a)if(r.type==="mesh")p.push(r);else if(r.type==="point")p.push(z(r.clone(),o,u));else if(r.type==="multipoint"){const i=r.clone();i.points=i.points.map(g=>z(g,o,u)),p.push(i)}else if(r.type==="extent"){const i=r.clone()._normalize(!1,!1,a);p.push(i.rings?new U(i):i)}else if(r.extent){const i=r.extent,g=R(i.xmin,u)*(2*o);let d=g===0?r.clone():C(r.clone(),g);i.offset(g,0),i.intersects(h)&&i.xmax!==o?(l=i.xmax>l?i.xmax:l,d=v(d,c),m.push(d),p.push("cut")):i.intersects(x)&&i.xmin!==u?(l=i.xmax*(2*o)>l?i.xmax*(2*o):l,d=v(d,c,360),m.push(d),p.push("cut")):p.push(d)}else p.push(r.clone());else p.push(r);else p.push(r);let w=R(l,o),S=-90;const J=w,b=new P;for(;w>0;){const r=360*w-180;b.addPath([[r,S],[r,-1*S]]),S*=-1,w--}if(m.length>0&&J>0){const r=nt(m,await V(n,m,b,f)),i=[],g=[];for(let $=0;$<p.length;$++){const L=p[$];if(L!=="cut")g.push(L);else{const q=r.shift(),N=t[$];N!=null&&N.type==="polygon"&&N.rings&&N.rings.length>1&&q.rings.length>=N.rings.length?(i.push(q),g.push("simplify")):g.push(c?O(q):q)}}if(!i.length)return g;const d=await Y(n,i,f),M=[];for(let $=0;$<g.length;$++){const L=g[$];L!=="simplify"?M.push(L):M.push(c?O(d.shift()):d.shift())}return M}const j=[];for(let r=0;r<p.length;r++){const i=p[r];if(i!=="cut")j.push(i);else{const g=m.shift();j.push(c===!0?O(g):g)}}return j}export{ot as b};
