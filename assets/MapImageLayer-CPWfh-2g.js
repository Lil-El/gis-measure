import{dN as $,d$ as w,dR as I,e0 as O,dP as T,dQ as E,dS as R,dO as M,e1 as L,e2 as P,b3 as N,dL as j,e3 as b,b6 as f,e4 as F,bv as g,e5 as J,bU as U,e6 as q,e7 as k,b as v,a4 as A,a7 as _,e as i,y as n,e8 as S,dV as V,e9 as z,d_ as B,a as C,ea as D}from"./index-Cy4mlNgs.js";import{E as G,f as H,Y as K}from"./SublayersOwner-O6gYJ7mu.js";import{m as W}from"./ExportImageParameters-CCCJm3CO.js";import{t as Q}from"./imageBitmapUtils-CYGt7NK-.js";import{e as x}from"./sublayerUtils-BgMS75WR.js";import"./QueryTask-CzsH9m4O.js";import"./executeForIds-B_8yXkWY.js";import"./query-COAEAFBQ.js";import"./normalizeUtils-Dm4feZdB.js";import"./normalizeUtilsCommon-BG6t4mj0.js";import"./pbfQueryUtils-ZYKvC6TE.js";import"./pbf-CDwuJ1NM.js";import"./executeQueryJSON-DnIeGLe2.js";import"./executeQueryPBF-DVALVPaG.js";import"./floorFilterUtils-DZ5C6FQv.js";let s=class extends $(w(I(G(H(O(T(E(R(M(L(P(N(_))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,a){return typeof e=="string"?{url:e,...a}:e}load(e){const a=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(j).then(()=>this._fetchService(a))),Promise.resolve(this)}readImageFormat(e,a){const p=a.supportedImageFormatTypes;return p&&p.includes("PNG32")?"png32":"png24"}writeSublayers(e,a,p,t){var y;if(!this.loaded||!e)return;const o=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let l=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((y=this.capabilities.exportMap)!=null&&y.supportsDynamicLayers)){const r=b(t.origin);if(r===f.PORTAL_ITEM){const d=this.createSublayersForOrigin("service").sublayers;l=x(o,d,f.SERVICE)}else if(r>f.PORTAL_ITEM){const d=this.createSublayersForOrigin("portal-item");l=x(o,d.sublayers,b(d.origin))}}const m=[],u={writeSublayerStructure:l,...t};let c=l;o.forEach(r=>{const d=r.write({},u);m.push(d),c=c||r.originOf("visible")==="user"}),m.some(r=>Object.keys(r).length>1)&&(a.layers=m),c&&(a.visibleLayers=o.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,a,p,t){const o=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const l=new W({layer:this,floors:t==null?void 0:t.floors,scale:F({extent:e,width:a})*o}),m=l.toJSON();l.destroy();const u=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},c=e&&e.spatialReference,y=c.wkid||JSON.stringify(c.toJSON());m.dpi*=o;const r={};if(t!=null&&t.timeExtent){const{start:d,end:h}=t.timeExtent.toJSON();r.time=d&&h&&d===h?""+d:`${d??"null"},${h??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:y,imageSR:y,size:a+","+p,...m,...u,...r}}async fetchImage(e,a,p,t){const{data:o}=await this._fetchImage("image",e,a,p,t);return o}async fetchImageBitmap(e,a,p,t){const{data:o,url:l}=await this._fetchImage("blob",e,a,p,t);return Q(o,l,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const a={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:p}=await g(this.url,a),{extent:t,fullExtent:o,timeExtent:l}=p,m=t||o;return{fullExtent:m&&U.fromJSON(m),timeExtent:l&&J.fromJSON({start:l[0],end:l[1]})}}loadAll(){return q(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return k(this,e)}async _fetchImage(e,a,p,t,o){var u,c,y;const l={responseType:e,signal:(o==null?void 0:o.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(a,p,t,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(((u=l.query)==null?void 0:u.dynamicLayers)!=null&&!((y=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&y.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query});try{const{data:r}=await g(m,l);return{data:r,url:m}}catch(r){throw A(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:a,ssl:p}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});p&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=a,this.read(a,{origin:"service",url:this.parsedUrl})}};i([n({type:S})],s.prototype,"dateFieldsTimeReference",void 0),i([n({type:Boolean})],s.prototype,"datesInUnknownTimezone",void 0),i([n()],s.prototype,"dpi",void 0),i([n()],s.prototype,"gdbVersion",void 0),i([n()],s.prototype,"imageFormat",void 0),i([V("imageFormat",["supportedImageFormatTypes"])],s.prototype,"readImageFormat",null),i([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],s.prototype,"imageMaxHeight",void 0),i([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],s.prototype,"imageMaxWidth",void 0),i([n()],s.prototype,"imageTransparency",void 0),i([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],s.prototype,"isReference",void 0),i([n({json:{read:!1,write:!1}})],s.prototype,"labelsVisible",void 0),i([n({type:["ArcGISMapServiceLayer"]})],s.prototype,"operationalLayerType",void 0),i([n({json:{read:!1,write:!1}})],s.prototype,"popupEnabled",void 0),i([n({type:S})],s.prototype,"preferredTimeReference",void 0),i([n()],s.prototype,"sourceJSON",void 0),i([n({json:{write:{ignoreOrigin:!0}}})],s.prototype,"sublayers",void 0),i([z("sublayers",{layers:{type:[K]},visibleLayers:{type:[D]}})],s.prototype,"writeSublayers",null),i([n({type:["show","hide","hide-children"]})],s.prototype,"listMode",void 0),i([n({json:{read:!1},readOnly:!0,value:"map-image"})],s.prototype,"type",void 0),i([n(B)],s.prototype,"url",void 0),s=i([C("esri.layers.MapImageLayer")],s);const ce=s;export{ce as default};
