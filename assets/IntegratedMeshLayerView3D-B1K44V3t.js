import{k as n,h as p,p as m,e as i,y as e,q as l,a as d}from"./index-Cy4mlNgs.js";import{x as h}from"./I3SMeshView3D-RTf_Y-eB.js";import{n as u}from"./LayerView3D-B5eS-Fo2.js";import{d as c}from"./LayerView-D3-CfPeq.js";import"./I3SOverrides-CueUAXw2.js";import"./I3SNode-Dnm1YoAi.js";import"./I3SUtil-VFUY8ZTQ.js";import"./I3SBinaryReader-DT7efj2T.js";import"./meshFeatureSet-B1bbq8zE.js";import"./MeshGeoreferencedRelativeVertexSpace-DziubWgX.js";import"./MeshLocalVertexSpace-C19iCZRo.js";import"./MeshTransform-CmCf0FLI.js";import"./georeference-eLsaPgE5.js";import"./External-DJ-f09Dr.js";import"./FeatureLayerView3D-96m7exON.js";import"./FeatureLayerViewBase3D-C7UgCvIP.js";import"./HeatmapDensity.glsl-CqGPXP2E.js";import"./dehydratedFeatureComparison-CTSwgXxz.js";import"./queryForSymbologySnapping-BeuuBiDn.js";import"./hash-CcEbRgUF.js";import"./Graphics3DObjectStates-AgIQU6bQ.js";import"./optimizedFeatureQueryEngineAdapter-BjvcuCyw.js";import"./centroid-BDoZr6aR.js";import"./PooledRBush-CdXQsE0v.js";import"./quickselect-MNhqgktj.js";import"./popupUtils-BWvNn-dk.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./QueryEngine-Dlgv0PZK.js";import"./normalizeUtils-Dm4feZdB.js";import"./normalizeUtilsCommon-BG6t4mj0.js";import"./WhereClause-DmiBXdNr.js";import"./executionError-N6aCOFps.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-Dk3NJwmm.js";import"./utils-DOKTL2iJ.js";import"./generateRendererUtils-CvLWrpaP.js";import"./FeatureStore-plfJxTa2.js";import"./BoundsStore-AkTg_LDK.js";import"./projectExtentUtils-B3pnsTKf.js";import"./query-COAEAFBQ.js";import"./pbfQueryUtils-ZYKvC6TE.js";import"./pbf-CDwuJ1NM.js";import"./EventedSet-B6UhN35c.js";import"./RefreshableLayerView-Bdq8XFIz.js";import"./SceneLayerWorker-BN6lx75M.js";const g=.2;let r=class extends h(u(c)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,o,a,s;return((s=(a=(o=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this.updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.handles.remove("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.handles.add(this.updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([e()],r.prototype,"layer",void 0),i([e()],r.prototype,"i3slayer",null),i([e(l)],r.prototype,"updatingProgress",void 0),i([e()],r.prototype,"updatingProgressValue",null),i([e()],r.prototype,"lodFactor",null),i([e({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const pt=r;export{pt as default};
