import{k as n,h as p,p as m,e as i,y as e,q as l,a as d}from"./index-ZXy_8vtR.js";import{x as h}from"./I3SMeshView3D-C2cQc0jK.js";import{n as u}from"./LayerView3D-CgPf55Ek.js";import{d as c}from"./LayerView-SAWhmu2y.js";import"./I3SOverrides-DAVPsgBz.js";import"./I3SNode-iF5Oad0E.js";import"./I3SUtil-BqiQRxRe.js";import"./I3SBinaryReader-CLSyl4Tp.js";import"./meshFeatureSet-BxiETsQK.js";import"./MeshGeoreferencedRelativeVertexSpace-CTpEvDgY.js";import"./MeshLocalVertexSpace-DEG7XqmY.js";import"./MeshTransform-BTjtmxCn.js";import"./georeference-CKrh8chV.js";import"./External-BdQiH0Wr.js";import"./FeatureLayerView3D-S7fLtd8A.js";import"./FeatureLayerViewBase3D-DCUUyFAA.js";import"./HeatmapDensity.glsl-DlyOll9f.js";import"./dehydratedFeatureComparison-4aeGdUJX.js";import"./queryForSymbologySnapping-B1PE7Dlp.js";import"./hash-CcEbRgUF.js";import"./Graphics3DObjectStates-Be_ir9Q8.js";import"./optimizedFeatureQueryEngineAdapter-CCVqFb8F.js";import"./centroid-BDoZr6aR.js";import"./PooledRBush-CqLt4YwJ.js";import"./quickselect-DQcByr3E.js";import"./popupUtils-DOiRgzc_.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./QueryEngine-BsMzIQyg.js";import"./normalizeUtils-CJOt4NFf.js";import"./normalizeUtilsCommon-BcPwwkhu.js";import"./WhereClause-B1b4ShaQ.js";import"./executionError-N6aCOFps.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-Dk3NJwmm.js";import"./utils-D0j69jhg.js";import"./generateRendererUtils-BmjBvBhB.js";import"./FeatureStore-C_X63k0A.js";import"./BoundsStore-DOHmqOtj.js";import"./projectExtentUtils-Arysk3oo.js";import"./query-By0Xo_45.js";import"./pbfQueryUtils-ccIkcgI-.js";import"./pbf-CRZLbftA.js";import"./EventedSet-T8GgXkj4.js";import"./RefreshableLayerView-MOdDOvZv.js";import"./SceneLayerWorker-B_WAR59V.js";const g=.2;let r=class extends h(u(c)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,o,a,s;return((s=(a=(o=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this.updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.handles.remove("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.handles.add(this.updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([e()],r.prototype,"layer",void 0),i([e()],r.prototype,"i3slayer",null),i([e(l)],r.prototype,"updatingProgress",void 0),i([e()],r.prototype,"updatingProgressValue",null),i([e()],r.prototype,"lodFactor",null),i([e({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const pt=r;export{pt as default};
